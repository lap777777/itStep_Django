github.com/academind/django-practical-guide-course-code/branches

1. nastartovani projektu:
    django-admin startproject NAZEV_PROJEKTU  - vytvori podslozku, kde je projekt
    django-admin startproject NAZEV_PROJEKTU . - vytvori projekt ve slozce, kde aktualne jsem

2. spusteni aplikace:
    musim se presunout do adresare, kde je projekt
    python3 manage.py startapp NAZEV_APLIKACE

3. spustit migraci:
    python3 manage.py migrate

4. spustit server:
    python3 manage.py runserver
    do prohlizece zkopirovat adresu z terminalu a nebo napsat localhost:8000

### propojeni urls projektu s aplikacemi:
urls.py:
    from django.urls import include
    do urlpatterns = [ ] pridat cestu na aplikaci:
    path("aplikace/", include("aplikace.urls")),
    nebo muzu nastavit pro index:
    path("", include("aplikace.urls")),
settings.py:
    pridani aplikace do INSTALLED_APPS - pro renderovani (tvorbu stranek ze sablon)
    INSTALLED_APPS = [
        "informace",
        "courses.apps.CoursesConfig",
    ]
    DEBAG = True - pracovni mod, na produkcnim modu po nahrani na web dat False

### v aplikaci
aplikace/urls.py (definuji cestu na views, ktere se budou zobrazovat):
    from django.urls import path  ... import metody path
    from . import views ... import views ze slozky dane aplikace
    zadam cesty na zobrazeni stranek do urlpattens = []
    path("", views.index, name="index"),
    path("<animal>", views.info_o_zvireti(), name="animal"), ... v zavorkach <> zadavam parametry
    path("<prvni>/<druhy>", views.ukazka, nane="ukazka"),
    - path convertor - int, str, slug, uuid, path, priklad muzu volat jinou funkci pokud dam: 
        <str:animal> nebo <int:animal>
    zadani cesty pres tridy:
    path("co davam do adresy stranky", nazev_view/funkce, name=jmeno,diky kteremu pak delam url odkazy)
    napr. path("kurzy", views.CoursesListView.as_view(), name="courses_list")
aplikace/views.py (definuji funkce, kde definuji parametry, ktere se maji zobrazit):
    from django.shortcuts import render
    from django.http import HttpResponse
    tady vytvorim views, ktere se zavolaji, kdyz prijde HTTP request
    nazvy funkci pak volam v souboru urls (rozcestnik)
    def index(request):
        return HttpResponse("Moje prvni stranka")
    def info_o_zvireti(request):
        response = zvirata[animal]  ... nacitam si data ze slovniku, podle zadaneho zvirete
        return HttpResponse(response)
    def ukazka(request, prvni, druhy):
        return HttpResponse(f"Prvni je {prvni}, druhy je {druhy}.")
    from django.http import HttpResponse, HttpResponseNotFound, HttpResponseRedirect
    osetreni chyb,kdyz nenajde stranku:
        try:    
            return HttpResponse ....
        except
            return HttpResponseNotFound ("Stranka nenalezena")
    presmerovani:
        return HttpResponseRedirect(nazev funkce)
    renderovani - tvorba http stranek ze sablon
        vlozit do views:
        from django.shortcuts import render
        funkce budou vracet odkazy na html stranky v templates:
        return render(request, "informace/info.html", {slovnik, kde jsou odkazy na <parametry>})

views pres modely:
from .models import Zvire
from django.shortcuts import get_object_or_404, render
def index(request):
    zvirata = Zvire.objects.all()
    return render(request, "informace/index.html", {
        "zvirata": zvirata     })
def info_animal(request, jmeno):
    animal = get_object_or_404(Zvire, jmeno=jmeno)
    return render(request, "informace/info1.html", {
        "jmeno": animal.jmeno,
        "barva": animal.barva[:-1] + "ou",
        "vaha": animal.vaha,
        "zije": animal.zije
    
dalsi moznost tvorit pohledy je pres tridy:
    from django.views.generic.base import TemplateView
    from django.views.generic import ListView, DetailView, CreateView
    TempleteView se pouziva pro stranky bez propojeni na modely
    ListView se pouziva pro stranky propojene na modely:
        class CourcesListView(ListView):
        template_name = "course_list.html" ... nazev html stranky z templates
        model = models.Course ... na jakem modelu je zalozena


### MODELY - v nich definuji, jak bude vypadat databaze 

1. krok - vytvoreni modelu v aplikaci - polls/models.py:
    class Question(models.Model):
        pak zadavam nazvy poli - typy poli v databazi:
        - models.CharField(max_lenght=200) ... textove podle
        - models.DateTimeFiled("nazev") ... pole datetime
        - models.IntegerField(default=0) ... pole pro cislo
        - models.EmailField(max_length=20)
    priklad: jmeno = models.CharField(max_length=30)
    pokud zadavam nova pole a uz mam zaznamy, tak musim osetrit nulove hodnoty u puvodnich zaznamu - napr. pres null=True: zije = models.BooleanField(null=True)
2. vytvoreni migraci pro zmeny v modelech:
    python3 manage.py makemigrations 
3. aplikace migraci - ulozeny zmeny v modelech do databaze: 
    python3 manage.py migrate
4. Vytvoreni prvniho uzivatele:
    python3 manage.py create superuser ... vytvori user, ktery se muze logovat do amin site
    Username: lap
    Email address: admin@admin.com
    Password: **********
5. registrace modelu v admin.py:
    polls/admin.py
        from . import models
        admin.site.register(models.Question)
    tabulky, ktere registruji v admin.py jsou pak videt  na webu/admin

V web/admin mi dava mnozne cislo na nazvy tabulek +s - muzu zmenit pomoci tridy Meta:
    class Meta:
        verbose_name_plural = "Zvirata"

Admin trida ve admin.py, ktera pomoci list_display upravy, jak vypada tabulka na webu/admin - a jeste ji pak pridam jako parametr do registrace tabulky:
    class ZvireAdmin(admin.ModelAdmin):
        list_display = ("jmeno", "vaha", "barva", "zije") ... jak to vypada
        list_filter = ("jmeno", "zije") ... podle ceho muzu filtrovat
    admin.site.register(models.Zvire, ZvireAdmin)



aplikace/templates/ (tady definuji stranky, ktere se po zavolani funkce ve views zobrazi)
    tady ukladam svoje sablony html.stranek - vkladam do nich normalni kod + filtry {{ | }} + tagy {% %}
prehled tagu a filtru
https://docs.djangoproject.com/en/3.2/ref/templates/builtins/

{# #} ... komentar v Djangu, neni videt na finalni strance
<!-- --> ... html komentar, ten je na finalni strance videt
delsi komentar v Djangu: {% comment %} dlouhy text ... {% endcomment %}

### URL odkazy
do url stranky zadat treti parametr name="" a ten pak pouzivam v url odkazech
path(<animal>, views.info_o_zvireti, name="zvire")
odkaz: <a href="{% url 'zvire' %}">text</a>

### sablony

1) base - zakladni sablona
zalozim si slozku templates v hlavnim adresari - do ni ulozim soubor se sablonou base.html, kde nastavim blocky pro title a content - kam se bude vkladat obsah do zakladni sablony
pro vkladani obsahu se pouziva znacka {% block XXX%} {% endblock %}
Do settings do TEMPLATES/DIRS vlozit do seznamu odkaz na templates: BASE_DIR / "templates"
Do stranky, ktera bude natahovat sablonu vlozim na zacatek {% extends "base.html" %} a tam kam chci vkladat obsah dam {% block XXX %} a {% endblock %}

2) include - vkladam do base dalsi sablony
{% include "xxx" %}
Primarne bere odkaz z hlavniho adresare templates, ale pokud si vytvorim v aplikaci podadresar includes, kde budu mit hlavicku, tak odkaz pak vypada:
{% include "informace/includes/header.html" %}

3) static files (ccs, javascript, img - soubory, co se nemeni)
v aplikaci si vytvorim podadresar static a za nej nazev aplikace - static/informace
do souboru dam znacku {% load static %} za znacku {% extends%}
a take do base musim pridat blok pro styly: {% block styling%} {% endblock %}
a do souboru, kam chci dat styl dam: {% block title%} <link rel="stylesheet" href="{% static "informace/styly.css"%}"> {% endblock%}
A pred nactenim statickych souboru je potreba restartovat server
Bootstrap - v hlavnim adresari si udelam slozku static a do ni se vlozim bootstrap.css a pak si do base vlozim {% load static %} a do <head> sekce vlozim link na bootstrap <link rel="stylesheet" href="{% static "bootstrap.css" %}">
Aby se bootstrap nasel vsude v aplikacich, tak do settings je potreba pridat: STATICFILES_DIRS = [ BASE_DIR / "static" ] do sekce # Static files
Obrazky - stejne jako styly - do slozky static si dam slozku img a do souboru dam load static a pak do stranky vkladam <img src="{% static ...%}">



### Prace s databazi v terminalu
python3 manage.py shell ... spoustim sell, kde budu pracovat s databazi
from informace.models import Zvire ... import tabulky Zvire
Zvire.objects.all() ... podivam se, co je v tabulce, kolik tam je objektu - pokud mam definovanou funkci str, tam se vypise dle ni
alik = Zvire(jmeno="Alik", vaha=15, barva="hneda") ... nova promenna
alik.save() ... ulozim promennou do databaze
alik = Zvire.objects.all()[0] .. vytahnuti alika z databaze a ulozeni do promenne
alik.zije = True ... pridam alikovi novou hodnotu a tu pak ulozim
alik.save()
Zvire(jmeno="Micka", vaha=10, ...).save() ... ulozeni zvirete rovnou
Zvire.objects.create(jmeno="Rex", vaha=20, barva="bila", zije=False) ... dalsi zpusob vytvoreni noveho objektu pres create()
Zvire.objects.get(jmeno="Alik") ... najde mi objekt, kde mam jmeno Alik, hleda pouze jeden
slon = Zvire.objects.filter(pk=1) ... jiny vyber pres filter() - filter najde vse a vraci to v listu a private key - (poradi objektu v databazi) a ulozim si ho do promenne slon
slon.delete() ... vymazani objektu slon
funkce: create(), read(), update(), delete(), get(), filter()
exit() ... vyskocim ze shellu